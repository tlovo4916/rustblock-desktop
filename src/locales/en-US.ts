export const enUS = {
  // Menu
  menu: {
    home: 'Home',
    editor: 'Code Editor',
    debug: 'Debug Tools',
    devices: 'Device Manager',
    ai: 'AI Assistant',
    tools: 'Toolbox',
    docs: 'Documentation',
    settings: 'Settings',
  },
  
  // Home
  home: {
    welcome: 'Welcome to RustBlock Desktop',
    subtitle: 'üéØ Visual programming environment for kids under 10',
    description: 'Support for Arduino, micro:bit and other hardware devices',
    features: '‚ú® Key Features',
    feature1: 'üß© Drag-and-drop block programming - As easy as building blocks',
    feature2: 'üì± Smart device detection - Auto-recognize connected hardware',
    feature3: 'ü§ñ AI programming assistant - Your friendly learning companion',
    feature4: 'üöÄ One-click code upload - Turn ideas into reality',
    quickStart: 'üîó Quick Start',
    step1: 'Connect your Arduino or micro:bit device',
    step2: 'Go to "Programming Environment" to start creating',
    step3: 'Drag and drop blocks to build your program',
    step4: 'Click upload and see what happens!',
  },
  
  // Device Management
  devices: {
    title: 'Device Manager',
    scanning: 'Scanning for devices...',
    noDevices: 'No devices detected',
    noDevicesDesc: 'Please connect your Arduino or micro:bit device',
    refresh: 'Refresh Device List',
    connect: 'Connect',
    disconnect: 'Disconnect',
    connected: 'Connected',
    disconnected: 'Disconnected',
    upload: 'Upload Code',
    configure: 'Configure Device',
    details: 'Device Details',
    port: 'Port',
    type: 'Type',
    driver: 'Driver',
    installDriver: 'Install Driver',
    scanDevices: 'Scan Devices',
    refreshing: 'Refreshing...',
    refreshAll: 'Refresh All',
    foundDevices: 'Found {count} devices',
    detectedDevices: 'Detected Devices',
    troubleshooting: 'If device is connected but not showing, please check:',
    checkUsb: 'USB cable is working properly',
    checkDriver: 'Device driver is installed',
    checkOccupied: 'Device is not occupied by other programs',
    manufacturer: 'Manufacturer',
    unknownDevice: 'Unknown Device',
    ready: 'Ready',
    needConfig: 'Needs Configuration',
    needDriver: 'Needs Driver',
    driverStatus: 'Driver Status',
    installed: 'Installed',
    notInstalled: 'Not Installed',
    recommendedLanguage: 'Recommended Language',
    supportedLanguages: 'Supported Languages',
    unknownDeviceType: 'Unknown Device Type',
    unknownDeviceDesc: 'This device is not recognized as a supported board type.',
    cannotInstallDriver: 'Cannot auto-install driver',
    cannotRecommendLanguage: 'Cannot recommend programming language',
    confirmSupportedDevice: 'Please confirm device is Arduino, ESP32, micro:bit or other supported device',
    serialMonitor: 'Serial Monitor',
    refreshStatus: 'Refresh Status',
    supportedDevices: 'Supported Device Types',
    arduinoSeries: 'Arduino Series',
    esp32Series: 'ESP32 Series',
    driverInstallInfo: 'Driver Installation Info',
    serialMonitorDisabled: 'Serial monitor function temporarily disabled',
    deviceConfiguration: 'Device Configuration',
    configurationDisabled: 'Device configuration function temporarily disabled',
    noDevicesError: 'No devices detected. Please ensure device is properly connected and drivers are installed.',
    scanFailed: 'Failed to scan devices',
    scanResult: 'Scan result',
    uniqueDevices: 'Unique devices',
    getStatusFailed: 'Failed to get status for device {device}',
    connectingDevice: 'Connecting to device',
    deviceNotFound: 'Device not found',
    deviceNotReady: 'Device not ready, please install driver first',
    portBusy: 'Port {port} is being used by another program, please close it and try again',
    connectSuccess: 'Device connected successfully',
    connectFailed: 'Failed to connect device',
    disconnectingDevice: 'Disconnecting device',
    disconnectSuccess: 'Device disconnected',
    disconnectFailed: 'Failed to disconnect device',
    getConnectedPortsFailed: 'Failed to get connected ports list',
    installingDriver: 'Installing driver',
    driverInstallResult: 'Driver installation result',
    driverInstallFailed: 'Failed to install driver',
    refreshingStatus: 'Refreshing device status',
    statusUpdated: 'Device status updated',
    refreshStatusFailed: 'Failed to refresh device status',
    refreshingAll: 'Refreshing all devices',
    refreshResult: 'Refresh result',
    refreshFailed: 'Failed to refresh devices',
    errorPermissionDenied: 'Permission denied: Please ensure current user has serial port access or run as administrator',
    errorDeviceBusy: 'Device busy: Port may be occupied by other programs, please close Arduino IDE, PlatformIO or other serial tools',
    errorDeviceNotFound: 'Device not found: Device may be disconnected, please check USB connection',
    errorTimeout: 'Connection timeout: Device not responding, please check device status and connection',
  },

  // Device Status
  device: {
    hardwareDevice: 'Hardware Device',
    connectedDevices: '{count} device(s) connected',
    noConnection: 'No device connected',
  },
  
  // Editor
  editor: {
    title: 'Code Editor',
    loading: 'Loading editor...',
    generateCode: 'Generate Code',
    uploadCode: 'Upload Code',
    saveProject: 'Save Project',
    loadProject: 'Load Project',
    clearWorkspace: 'Clear Workspace',
    selectDevice: 'Select Device',
    emptyCode: 'Code cannot be empty',
    deviceNotReady: 'Device not ready, please check connection and drivers',
    languageNotSupported: 'Device does not support {language}',
    missingTool: 'Missing Upload Tool',
    missingToolContent: 'Need to install {tool} to upload code. Install automatically?',
    toolInstalled: 'Tool installed successfully',
    toolInstallFailed: 'Tool installation failed, please install manually',
    deviceCheckFailed: 'Device status check failed',
    deviceSelected: 'Device selected',
    connectAndSelect: 'Please connect and select target device',
    uploadingTo: 'Uploading code to {device}',
    uploadDisabled: 'Upload function temporarily disabled',
  },
  
  // AI Assistant
  ai: {
    title: 'AI Programming Assistant',
    placeholder: 'Ask me anything about programming...',
    send: 'Send',
    thinking: 'Thinking...',
    error: 'An error occurred',
    noApiKey: 'Please configure API key in settings first',
    configureNow: 'Configure Now',
    welcomeMessage: 'Hello! I am paipai! Your AI helper on the programming journey. Is there anything I can help you with?',
    connectingAI: 'Connecting to AI...',
    systemPrompt: 'You are a programming assistant, answer concisely, use emojis.',
    sendFailed: 'Send failed',
    chatWithAI: 'Chat with AI Assistant',
    configureApiKey: 'Please configure API key in settings to use AI chat',
    assistantName: 'Xiao Pai',
    aiAssistant: 'AI Assistant',
    askQuestion: 'Ask Paipai a question~',
    configureApiKeyFirst: 'Please configure API key first',
    sending: 'Sending...',
    quickQuestions: 'Quick Questions',
    question1: 'What is a variable?',
    question2: 'How to make LED blink?',
    question3: 'What is a loop?',
    question4: 'How to read button state?',
    question5: 'What is a function?',
    question6: 'How to use a buzzer?',
    tips: 'Tips',
    tip1: 'You can ask me any programming question',
    tip2: 'I will explain in simple language',
    tip3: 'If you encounter errors, ask me how to solve them',
    tip4: 'You can also ask me about project ideas!',
    newChat: 'New Chat',
    chatHistory: 'Chat History',
    delete: 'Delete',
    confirmDelete: 'Confirm Delete',
    deleteSessionTip: 'This action cannot be undone. Are you sure you want to delete this conversation?',
  },
  
  // Settings
  settings: {
    title: 'Application Settings',
    general: 'General Settings',
    performance: 'Performance Monitor',
    aiConfig: 'ü§ñ AI Assistant Configuration',
    aiModel: 'AI Model',
    apiKey: 'API Key',
    apiKeyPlaceholder: 'Enter your API key...',
    apiUrl: 'API Service URL',
    save: 'Save Configuration',
    saving: 'Saving...',
    test: 'Test Connection',
    testing: 'Testing...',
    saveSuccess: 'AI configuration saved successfully!',
    testSuccess: 'API connection test successful!',
    testFailed: 'API connection test failed',
    programming: 'üîß Programming Environment',
    autoSave: 'Auto-save projects (every 30 seconds)',
    deviceSettings: 'üì± Device Settings',
    baudRate: 'Default Baud Rate',
    autoDetect: 'Auto-detect new devices',
    checkTools: 'Check System Tools Status',
    about: '‚ÑπÔ∏è About',
    version: 'Version',
    team: 'Development Team',
    builtWith: 'Built with Tauri + React + Rust',
    checkUpdate: 'Check for Updates',
    viewLogs: 'View Logs',
    enterApiKey: 'Please enter API key',
    saveFailed: 'Failed to save configuration',
    systemToolsStatus: 'System Tools Status',
  },
  
  // Debug
  debug: {
    title: 'Tauri Environment Debug',
    checkEnvironment: 'Check Environment',
    testInvoke: 'Test invoke',
    testSafeInvoke: 'Test safeInvoke',
    testDeepSeek: 'Test DeepSeek Connection',
    clickToTest: 'Click button to test',
  },
  
  // Common
  common: {
    loading: 'Loading...',
    error: 'Error',
    success: 'Success',
    warning: 'Warning',
    info: 'Info',
    confirm: 'Confirm',
    cancel: 'Cancel',
    ok: 'OK',
    yes: 'Yes',
    no: 'No',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    close: 'Close',
    refresh: 'Refresh',
    retry: 'Retry',
    back: 'Back',
    next: 'Next',
    finish: 'Finish',
    search: 'Search',
    filter: 'Filter',
    export: 'Export',
    import: 'Import',
    upload: 'Upload',
    download: 'Download',
    print: 'Print',
    share: 'Share',
    help: 'Help',
    language: 'Language',
    theme: 'Theme',
    lightTheme: 'Light',
    darkTheme: 'Dark',
  },
};